<div class="container">
  <div class="row mt-5">
    <div class="col-10 offset-1 border-bottom">
      <p class="h3">作業者ID :<%= @progress[0] %></p>
    </div>
  </div>
  <div class="row mt-3">
    <div class="col-10 offset-1">

<!--       <div class="row card">
        <div class="col-12">
          <p>取り込んだ画像</p>
        </div>
        <div class="col-12 pb-2">
          <canvas id="SrcCanvas" onmousedown="OnMousedown(event);" onmousemove="OnMousemove(event);" onmouseup="OnMouseup(event);"></canvas>
        </div>
      </div> -->
      <div class="row card">
        <div class="col-12 mt-3">
          <p class="h5">作業画像</p>
        </div>
        <div class="col-12 pb-2">
          <div class="col-12 pb-2 relative" id="BaseDiv">

              <%#= image_tag @user_state[1], id: "img_area" %>
            <canvas id="canvas">
            </canvas>
          </div>


          <%# @user_state.each do |pic| %>
              <%#= image_tag pic[1] %>
          <%# end %>
<!--           <canvas id="RecCanvas">
              <%# @user_state.each do |pic| %>
                  <%#= image_tag pic[1] %>
              <%# end %>
          </canvas> -->
        </div>
        <div class="row mb-3">
            <div class="col-10 ml-5">
                <div class="row">
                    <div class="col-2 mx-auto">
                      <!-- 拡大 -->
                      <a href="#" onclick="zoomInImage();return false;" class="btn btn-outline-primary mr-2">
                          <i class="fas fa-plus"></i>
                      </a>
                      <a href="#" onclick="zoomOutImage();return false;" class="btn btn-outline-primary">
                        <i class="fas fa-minus"></i>
                      </a>
                    </div>
                    <div class="col-2 mx-auto">
                      <a class="btn btn-primary btn-block text-white">bard</a>
                    </div>
                    <div class="col-2 mx-auto">
                      <a class="btn btn-primary btn-block text-white">non-bard</a>
                    </div>
                    <div class="col-2 mx-auto">
                      <a class="btn btn-primary btn-block text-white">unknown</a>
                    </div>
                    <div class="col-2 mx-auto">
                      <a class="btn btn-outline-primary btn-block text-primary">引き直す</a>
                    </div>
                </div>
            </div>
        </div>
      </div>


      <div class="row mt-3 card">
        <div class="col-12 mt-3">
          <p class="h5">進捗</p>
        </div>
        <div class="col-12">
            <div class="progress mb-3" style="height: 40px;">
              <div class="progress-bar" role="progressbar" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" style="width:<%= @progress[1]%>%;"><%= @progress[1]%>%</div>
            </div>
        </div>
      </div>
      <!-- タブの中身 -->
      <div id="conmenu" class="card conmenu" style="display:none;, position:fixed;">
        <form name="test">
            <input class="btn btn-primary btn-block mt-2" type="button" name="yahoo" value="Bird" onClick="kakunin(1)">
            <input class="btn btn-primary btn-block mt-2" type="button" name="google" value="Non-bird" onClick="kakunin(2)">
            <input class="btn btn-primary btn-block mt-2 mb-2" type="button" name="google" value="UnKnown" onClick="kakunin(3)">
            <input class="btn btn-primary btn-block mt-2 mb-2" type="button" name="google" value="削除" onClick="kakunin(4)">
        </form>
      </div>

    </div>
  </div>
</div>

<script>
// キャンバス

window.onload = function () {
  const canvas = document.getElementById("canvas");
  // const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  // document.body.appendChild(canvas);

  console.log("canvas",canvas)

  const img = new Image();
  img.src = ' <%= asset_path @user_state[1] %>';

  img.onload = () => {
    // Canvasを画像のサイズに合わせる
    canvas.height = img.height;
    canvas.width  = img.width;

    // Canvasに描画する
    ctx.drawImage(img, 0, 0);
  };

  img.onerror = () => {
    console.log('画像の読み込み失敗');
  };
}

















// function addRect(element, location){
//   //追加する要素を定義する
//   var recDiv = document.createElement('div');
//   recDiv.style.position = "absolute";

//   //アノテーションの枠の位置の設定
//   leftPos= location[0];//X
//   topPos = location[1];//Y
//   recSizeH = location[2];//H
//   recSizeW = location[3];//W
//   recDiv.style.left = (leftPos+15)+"px";
//   recDiv.style.top = topPos+"px";
//   recDiv.style.minHeight = recSizeH+"px";
//   recDiv.style.minWidth = recSizeW+"px";
//   recDiv.style.maxHeight = recSizeH+"px";
//   recDiv.style.maxWidth = recSizeW+"px";
//   recDiv.style.borderWidth = "2px";
//   recDiv.style.borderStyle = "solid";
//   recDiv.style.borderColor = "red";
//   recDiv.classList.add("target");
//   recDiv.classList.add("drag-and-drop");
//   element.appendChild(recDiv);
// }


// function zoomInImage(){
//   //画像オブジェクトを取得する
//   var obj = document.images['img_area'];

//   var currentHeight = obj.height;

//   //画像の高さを２倍にする
//   obj.height = currentHeight * 2 ;
// }

// function zoomOutImage(){
//   //画像オブジェクトを取得する
//   var obj = document.images['img_area'];

//   var currentHeight = obj.height;

//   //画像の高さを２倍にする
//   obj.height = currentHeight / 2 ;
// }



// window.onload = function () {

//   // moveShape()
//   var image = document.getElementById("img_area");

//   var width = image.naturalWidth ;
//   var height = image.naturalHeight ;

//   var base = document.getElementById("BaseDiv");
//   var location = [];
<%#= @user_state[2][0..-3] %>
//   addRect(base,location);

//   // クリック時にタブを表示する設定
//   // body = document.body;
//   menu = document.getElementById('conmenu');
//   console.log("menu", menu)

//   //右クリック時に独自コンテキストメニューを表示する
//   image.addEventListener('contextmenu',function(e){

//     menu.style.display = "block";
//   // src_canvas.addEventListener('contextmenu',function(e){
//     menu.style.left = e.pageX + 'px';
//     menu.style.top = e.pageY + 'px';
//     menu.classList.add('on');
//   });

//   //左クリック時に独自コンテキストメニューを非表示にする
//   image.addEventListener('click',function(){
//     if(menu.classList.contains('on')){
//       menu.classList.remove('on');
//     }
//   });

//   moveShape()

// }

// アノテーションによる選別
// function kakunin(btnNo){
//   if (btnNo == 1){
//     dir = "Bird";
//   }else if(btnNo == 2){
//     dir = "Non-bird";
//   }else{
//     dir = "UnKnown";
//   }
// }

// function moveShape(){

//     //要素の取得
//     var elements = document.getElementsByClassName("drag-and-drop");

//     //要素内のクリックされた位置を取得するグローバル（のような）変数
//     var x;
//     var y;

//     //マウスが要素内で押されたとき、又はタッチされたとき発火
//     for(var i = 0; i < elements.length; i++) {
//         elements[i].addEventListener("mousedown", mdown, false);
//         elements[i].addEventListener("touchstart", mdown, false);
//     }

//     //マウスが押された際の関数
//     function mdown(e) {

//         //クラス名に .drag を追加
//         this.classList.add("drag");

//         //タッチデイベントとマウスのイベントの差異を吸収
//         if(e.type === "mousedown") {
//             var event = e;
//         } else {
//             var event = e.changedTouches[0];
//         }

//         //要素内の相対座標を取得
//         x = event.pageX - this.offsetLeft;
//         y = event.pageY - this.offsetTop;

//         //ムーブイベントにコールバック
//         document.body.addEventListener("mousemove", mmove, false);
//         document.body.addEventListener("touchmove", mmove, false);
//     }

//     //マウスカーソルが動いたときに発火
//     function mmove(e) {

//         //ドラッグしている要素を取得
//         var drag = document.getElementsByClassName("drag")[0];

//         //同様にマウスとタッチの差異を吸収
//         if(e.type === "mousemove") {
//             var event = e;
//         } else {
//             var event = e.changedTouches[0];
//         }

//         //フリックしたときに画面を動かさないようにデフォルト動作を抑制
//         e.preventDefault();

//         //マウスが動いた場所に要素を動かす
//         drag.style.top = event.pageY - y + "px";
//         drag.style.left = event.pageX - x + "px";

//         //マウスボタンが離されたとき、またはカーソルが外れたとき発火
//         drag.addEventListener("mouseup", mup, false);
//         document.body.addEventListener("mouseleave", mup, false);
//         drag.addEventListener("touchend", mup, false);
//         document.body.addEventListener("touchleave", mup, false);

//     }

//     //マウスボタンが上がったら発火
//     function mup(e) {
//         var drag = document.getElementsByClassName("drag")[0];

//         //ムーブベントハンドラの消去
//         document.body.removeEventListener("mousemove", mmove, false);
//         drag.removeEventListener("mouseup", mup, false);
//         document.body.removeEventListener("touchmove", mmove, false);
//         drag.removeEventListener("touchend", mup, false);

//         //クラス名 .drag も消す
//         drag.classList.remove("drag");
//     }

// }

// // ユーザーによりファイルが追加された
// function onAddFile(event) {

//   var BaseDiv = document.getElementById("BaseDiv");
//   console.log("BaseDiv",BaseDiv);

//   // ファイルが読み込まれた
//   reader.onload = function (event) {

//     // イメージが読み込まれた
//     image.onload = function (){
//       src_canvas.width  = image.width;
//       src_canvas.height = image.height;
//       // キャンバスに画像を描画
//       src_ctx.drawImage(image,0,0);

//       //追加する要素を定義する
//       var recDiv = document.createElement('div');
//       recDiv.style.position = "absolute";

//       //アノテーションの枠の位置の設定
//       leftPos= 0;
//       topPos = 0;
//       recSizeH = 50;
//       recSizeW = 50;
//       recDiv.style.left = leftPos+"px";
//       recDiv.style.top = topPos+"px";
//       recDiv.style.minHeight = recSizeH+"px";
//       recDiv.style.minWidth = recSizeW+"px";
//       recDiv.style.maxHeight = recSizeH+"px";
//       recDiv.style.maxWidth = recSizeW+"px";
//       recDiv.classList.add("target");
//       recDiv.classList.add("drag-and-drop");

//       console.log("element",recDiv);

//       BaseDiv.appendChild(recDiv);

//       moveShape()

//     };

//     // イメージが読み込めない
//     image.onerror  = function (){
//       alert('このファイルは読み込めません。');
//     };

//     image.src = reader.result;
//   };
//   if (files[0]){
//     reader.readAsDataURL(files[0]);
//     document.getElementById("inputfile").value = '';
//   }
// }

</script>

